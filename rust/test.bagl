Bool = True | False;

Unit = Unit;

List a = Cons a (List a) | Nil;

Pair a b = Pair a b;


null = (\ xs . case xs {Nil -> True; _ -> False});

head = (\xs . case xs {
    Cons a as -> a;
    Nil -> undefined
});

tail = (\xs . case xs {
    Cons a as -> as;
    Nil -> undefined
});

foldl = (\f . (\acc . (\xs . (if (null xs) (acc) (let z = f acc (head xs) in foldl f z (tail xs))))));
foldr = (\f . (\acc . (\xs . (if (null xs) (acc) (f (head xs) (foldr f acc (tail xs)))))));

map = (\f . (\xs . foldr (\a. (\b. Cons (f a) b)) Nil xs));

id = \x.x;


list = Cons 1 (Cons 2 (Cons 3 Nil));

fact = (\n . case n {
    Z -> one;
    S x -> mult n (fact x)
});

add_one = + 1;

pair = Pair 1;


fact = (\ n . if (eq n 1) (1) (* n (fact (- n 1))));

sum = foldl + 0;
prod = foldr * 1;

fromTo = (\a . (\b. if (eq a b) (Cons a Nil) (Cons a (fromTo (+ 1 a) b))));


main = map (+ 1) (fromTo 1 10)