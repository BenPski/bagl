use std::str::FromStr;
use crate::ast::Expr;
use crate::ast::Definition;
use crate::ast::Toplevel;
use crate::ast::Pattern;
use std::rc::Rc;
use crate::info::*;
use crate::builtins::*;
use num::bigint::BigInt;
use std::cell::RefCell;
use std::collections::HashMap;


grammar;


// parse toplevel stuff 
pub Top: Toplevel = {
    <defs: Top> ";" <def: Definition> => {
        let mut defs = defs;
        defs.defs.push(Definition::new(def.0, def.1));
        defs
    },
    <defs: Top> ";" <def: Data> => {
        let mut defs = defs;
        let info = create_data_info(def.0, def.1);
        let data = info.to_definitions();
        let mut signatures = defs.signatures;
        let sigs = info.constructor_signatures();
        signatures.extend(sigs);
        for d in data {
            defs.data.push(d);
        }
        defs.signatures = signatures;
        defs
    },
    <def: Data> => {
        let d = create_data_info(def.0, def.1);
        Toplevel {data: d.to_definitions(), defs: Vec::new(), signatures: d.constructor_signatures()}
    },
    <def: Definition> => {
        Toplevel {data: Vec::new(), defs: vec!(Definition::new(def.0, def.1)), signatures: HashMap::new()}
    }
}


Expr: Rc<Expr> = {
	// lambda
	// "\\" <head:Var> "." <body:Expr> => Rc::new(Expr::Lam(Rc::new(Expr::Var(head)), Rc::clone(&body))),
    // multi-lambda
    "\\" <args: Vars> "." <body: Expr> => {
        let mut expr = Rc::clone(&body);
        let mut args = args;
        args.reverse();
        for arg in args {
            expr = Rc::new(Expr::Lam(Rc::new(Expr::Var(arg, RefCell::new(0))), Rc::clone(&expr)));
        }
        expr
    },
    // let
    "let" <defs: Definitions> "in" <body: Expr> => {
        let mut vars = Vec::new();
        let mut definitions = Vec::new();
        for i in 0..defs.len() {
            vars.push(Rc::clone(&defs[i].0));
            definitions.push(Rc::clone(&defs[i].1));
        }
        // correct the order
        vars.reverse();
        definitions.reverse();
        Rc::new(Expr::LetRec(vars, definitions, body))
    },
    // "letrec" <defs: Definitions> "in" <body: Expr> => {
    //     let mut vars = Vec::new();
    //     let mut definitions = Vec::new();
    //     for i in 0..defs.len() {
    //         vars.push(Rc::clone(&defs[i].0));
    //         definitions.push(Rc::clone(&defs[i].1));
    //     }
    //     Rc::new(Expr::LetRec(vars, definitions, body))
    // },
    // where
    // <body: Expr> "where" "{" <defs: Definitions> "}" => {
    //     let mut vars = Vec::new();
    //     let mut definitions = Vec::new();
    //     for i in 0..defs.len() {
    //         vars.push(Rc::clone(&defs[i].0));
    //         definitions.push(Rc::clone(&defs[i].1));
    //     }
    //     Rc::new(Expr::Let(vars, definitions, body))
    // },
    //case
    "case" <expr: Expr> "{" <arms: CaseArms> "}" => {
        let mut pats = Vec::new();
        let mut branches = Vec::new();
        for arm in arms {
            pats.push(arm.0);
            branches.push(arm.1);
        }
        Rc::new(Expr::Case(expr, pats, branches))
    },
    // if
    "if" <cond:Expr> "then" <b1:Expr> "else" <b2:Expr> => Rc::new(Expr::If(cond, b1, b2)),
    // {
    //     let branch1 = Rc::new(Expr::Lam(Rc::new(Expr::Var("_".to_string())), b1));
    //     let branch2 = Rc::new(Expr::Lam(Rc::new(Expr::Var("_".to_string())), b2));
    //     let cond = Rc::new(Expr::App(Rc::new(Expr::App(cond, branch1)), branch2));
    //     Rc::new(Expr::App(cond, Rc::new(Expr::Int(BigInt::from(0)))))
    // }
    // lazy and force, force just needs an arbitrary argument
    // "lazy" <expr:Expr> => Rc::new(Expr::Lam(Rc::new(Expr::Var("_".to_string(), RefCell::new(0))), expr)),//Rc::new(Expr::Lazy(expr)),
    // "force" <expr:Expr> => Rc::new(Expr::App(expr, Rc::new(Expr::Int(BigInt::from(0))))),//Rc::new(Expr::Force(expr)),
	// data
	// "data" <typ: TExpr> "=" <defs: DExprs> => {
	// 	println!("{:?}", typ);
	// 	println!("{:?}", defs);
 //        // let info = create_data_info(typ, defs);
 //        // Rc::new(Expr::Let)
	// 	Rc::new(Expr::Var("data".to_string()))
	// },
	// application
	FExpr,
}

Vars: Vec<String> = {
    <args: Vars> <arg: Var> => {
        let mut args = args;
        args.push(arg);
        args
    },
    <arg:Var> => vec!(arg),
    "_" => vec!("_".to_string()),
}

CaseArms: Vec<(Pattern, Rc<Expr>)> = {
    <arms: CaseArms> ";" <arm: CaseArm> => {
        let mut arms = arms;
        arms.push(arm);
        arms
    },
    <arm: CaseArm> => vec!(arm),
}

CaseArm: (Pattern, Rc<Expr>) = {
    <pat: Pattern> "->" <expr: Expr> => (pat, expr),
}

// pattern for case expression
// is either a single variable, or a constructor and some amount of variables
Pattern: Pattern = {
    <pat: Pattern> <var: Var> => {
        if let Pattern::Construct(cons, vars) = pat {
            let mut vars = vars;
            vars.push(var);
            Pattern::Construct(cons, vars)
        } else {
            panic!("Malformed pattern.")
        }
    },
    Cons => Pattern::Construct(<>, Vec::new()),
    Var => Pattern::Irrefutable(<>),
    "_" => Pattern::Wildcard,
    Int => Pattern::Int(<>),
    Float => Pattern::Float(<>),
    Text => Pattern::Str(<>),
}

Definitions: Vec<(Rc<Expr>, Rc<Expr>)> = {
    <defs: Definitions> ";" <def: Definition> => {
        let mut defs = defs;
        defs.push(def);
        defs
    },
    <def: Definition> => vec!(def),
}

Definition: (Rc<Expr>, Rc<Expr>) = {
    // <a:Assign> "=" <expr: Expr> => (Rc::new(Expr::Var(a)), expr),
    <vars: Vars> "=" <expr: Expr> => {
        let mut vars = vars;
        let mut expr = expr;
        while vars.len() > 1 {
            let arg = vars.pop();
            if let Some(a) = arg {
                expr = Rc::new(Expr::Lam(Rc::new(Expr::Var(a, RefCell::new(0))), Rc::clone(&expr)));
            } else {
                panic!("Failed to pop for definition.")
            }
        }
        let a = vars.pop();
        if let Some(assign) = a {
            (Rc::new(Expr::Var(assign, RefCell::new(0))), expr)
        } else {
            panic!("Ran out of variables to assign to.")
        }        
    },
}

Assign : String = {
    Var => <>,
}

Data: (Vec<String>, Vec<Vec<Vec<String>>>) = {
    <typ: TExpr> "=" <defs: DExprs> => {
        (typ, defs)
    }
}

// need some indirection to make sure things aren't ambiguous
FExpr: Rc<Expr> = {
	<left: FExpr> <right: AExpr> => Rc::new(Expr::App(Rc::clone(&left), Rc::clone(&right))),
	AExpr,
}

AExpr: Rc<Expr> = {
	Var => Rc::new(Expr::Var(<>, RefCell::new(0))),
	Cons => Rc::new(Expr::Var(<>, RefCell::new(0))),
	Int => Rc::new(Expr::Int(<>)),
	Float => Rc::new(Expr::Float(<>)),
    Text => Rc::new(Expr::Str(<>)),
    "add_int" => Rc::new(Expr::Builtin(2, "+".to_string(), add, Vec::new(), vec!["Int".to_string(), "Int".to_string(), "Int".to_string()])),
    "add_float" => Rc::new(Expr::Builtin(2, "+".to_string(), add, Vec::new(), vec!["Float".to_string(), "Float".to_string(), "Float".to_string()])),
    "mul_int" => Rc::new(Expr::Builtin(2, "*".to_string(), mult, Vec::new(), vec!["Int".to_string(), "Int".to_string(), "Int".to_string()])),
    "mul_float" => Rc::new(Expr::Builtin(2, "*".to_string(), mult, Vec::new(), vec!["Float".to_string(), "Float".to_string(), "Float".to_string()])),
    "sub_int" => Rc::new(Expr::Builtin(2, "-".to_string(), sub, Vec::new(), vec!["Int".to_string(), "Int".to_string(), "Int".to_string()])),
    "sub_float" => Rc::new(Expr::Builtin(2, "-".to_string(), sub, Vec::new(), vec!["Float".to_string(), "Float".to_string(), "Float".to_string()])),
    "div_int" => Rc::new(Expr::Builtin(2, "/".to_string(), div, Vec::new(), vec!["Int".to_string(), "Int".to_string(), "Int".to_string()])),
    "div_float" => Rc::new(Expr::Builtin(2, "/".to_string(), div, Vec::new(), vec!["Float".to_string(), "Float".to_string(), "Float".to_string()])),
    // "-" => Rc::new(Expr::Builtin(2, "-".to_string(), sub, Vec::new())),
    // "*" => Rc::new(Expr::Builtin(2, "*".to_string(), mult, Vec::new())),
    // "/" => Rc::new(Expr::Builtin(2, "/".to_string(), div, Vec::new())),
    "eq_int" => Rc::new(Expr::Builtin(2, "==".to_string(), eq, Vec::new(), vec!["Int".to_string(), "Int".to_string(), "Bool".to_string()])),
    "eq_float" => Rc::new(Expr::Builtin(2, "==".to_string(), eq, Vec::new(), vec!["Float".to_string(), "Float".to_string(), "Bool".to_string()])),
    "error" <t: Text> => Rc::new(Expr::Error(t)),
    "undefined" => Rc::new(Expr::Bottom),
	"(" <x:Expr> ")" => x,
}


TExpr: Vec<String> = {
	<left: TExpr> <right: TAExpr> => {
		let mut args = left;
		args.push(right);
		args
	},
	<cons: Cons> => vec!(cons),
}
TAExpr: String = {
	Var => <>,
}

DExpr: Vec<Vec<String>> = {
	<left: DExpr> <right: DAExpr> => {
		let mut args = left;
		args.push(right);
		args
	},
	<cons: Cons> => vec!(vec!(cons)),
}

DAExpr: Vec<String> = {
	Var => vec!(<>),
	Cons => vec!(<>),
	"(" <x:TExpr> ")" => x,
}

DExprs: Vec<Vec<Vec<String>>> = {
	<defs: DExprs> "|" <def:DExpr> => {
		let mut defs = defs;
		defs.push(def);
		defs
	},
	<def: DExpr> => vec!(def),
}

// python like text
Text: String = {
    <s:r#""(([^\\"]|\\.)*)""#> => s[1..(s.len() - 1)].to_string(),
    <s:r"'[^']*'"> => s[1..(s.len() - 1)].to_string()
}

Comment: () = {
    <s:r"//[^\n\r]*[\n\r]*"> => {}
}



Var: String = <s:r"[a-z_][A-z_]*"> => s.to_string();
Cons: String = <s:r"[A-Z][a-z]*"> => s.to_string();
Int: BigInt = <s:r"[0-9]+"> => BigInt::from_str(s).unwrap();
Float: f64 = <s:r"[0-9]+\.[0-9]+"> => f64::from_str(s).unwrap();